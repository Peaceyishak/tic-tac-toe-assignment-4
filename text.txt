¥.Ğ Gezahegn, [Jan 23, 2023 at 13:08]
class Game:
    def init(self):
        self.board = Board()
        self.display = Display()
        self.player_1 = Player("Player 1", "X")
        self.player_2 = Player("Player 2", "O")
        self.current_player = self.player_1

    def play(self):
        self.display.show_board(self.board.state)
        while True:
            move = self.display.get_move(self.current_player)
            if self.board.is_valid_move(move):
                self.board.update_state(move, self.current_player.symbol)
                self.display.show_board(self.board.state)
                if self.board.has_winner():
                    self.display.show_winner(self.current_player)
                    break
                elif self.board.is_full():
                    self.display.show_draw()
                    break
                self.current_player = self.player_2 if self.current_player == self.player_1 else self.player_1
            else:
                self.display.show_invalid_move()

class Board:
    def init(self):
        self.state = [["-" for _ in range(3)] for _ in range(3)]

    def is_valid_move(self, move):
        row, col = move
        return self.state[row][col] == "-"

    def update_state(self, move, symbol):
        row, col = move
        self.state[row][col] = symbol

    def has_winner(self):
        # check rows, columns, and diagonals for a winner
        pass

    def is_full(self):
        # check if all spaces on the board are filled
        pass

class Display:
    def show_board(self, state):
        # display the current state of the board
        pass

    def get_move(self, player):
        # get a move from the current player
        pass

    def show_winner(self, player):
        # display the winner
        pass

    def show_draw(self):
        # display a draw message
        pass

    def show_invalid_move(self):
        # display an invalid move message
        pass

class Player:
    def init(self, name, symbol):
